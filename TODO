TODO:
-Write rspec expectations for non-admin API 
    -Get concerns working
    -Write out factories
    -Write out specs
-Code out backend
    -Fix routes to match API
    -Postgres hash for user preferences?
    -Recommender system that applies default weight and chooses at random if weight is near the default
    -Otherwise, recommender gives restaurants which have the most sources, and then the most recommendations
    -Recommender system that weights on sources specific for recently searched locations
    -Add Images to Restaurants and Sources
    -User Authentication
    -User accounts to store preferences
    -Ability to select sources
    -Recommendations will filter on selected sources
    -Location search that limits results to certain area
    -Add distance for any location searches
    -Add "Don't Show this Again"
    -Add "Tried"
    -Recommender system that weights on sources specific for type of food
    -Default images based on category if no images are found
-Code up Frontend
    -Plan out JS framework
    -User Authentication
    -Paginate results
-Optimization
    -Change the restaurant showable scope to use NOT EXISTS instead of NOT IN
    -Find out how to do source_showable using SQL/scopes
    -Remove unwanted Devise modules
-Admin
    -Plan out admin backend API
    -Write rspec expectations of admin API
    -Code out admin stuff
    -Improve manual uploading
-Seed Heroku Database
-Automatic up-to-date for recommendations
-(DONE)Add Recommendation Groups
-(DONE)Move category into separate model
-(DONE)Set up Postgres
-(DONE)Deploy to Heroku
-(DONE)Seed database
-(DONE)Specify source categories
-(DONE)Admin Page
    -(DONE)Authorization
    -(DONE)Easy upload function to upload new restaurant data

Tests:
-Recommender
-Uploading
-Counts get updated correctly
-Frontend
